---
title: "Bits and pieces"
echo: TRUE
message: FALSE
warning: FALSE
---

## Premable

This space contains two things:

* A wish list: Things that came up during the course that may be of enough generic interest to cover
* A list of *ad hoc* material, both those from the wish list and then some.

## Wish list

This contains a list of material on some specific issues that where covered

* Interactive ggplot -> only solution now is the {plotly}-package (see below)
* Sampling design
  * Theory
  * Setup
  * Evaluation

## ggplot-plotly

Supposedly any ggplot can be passed to plotly to generate an interactive graph. Following is a short example:

```{r, eval = FALSE}

library(tidyverse)
library(plotly)

# A ggplot object.
p <- 
  "ftp://ftp.hafro.is/pub/data/csv/minke.csv" |> 
  read_csv() |> 
  ggplot(aes(x = age, y = length)) +
  geom_point()
# turn a ggplot object into plotly
ggplotly(p)
```


## On functions and arguments

Almost all the stuff you do in R is via some function call. All functions of course have a specific name and most functions have one or more arguements. A typical structure of a function looks something like this:

```{r eval = FALSE}
function_name(argument1 = value1, argument2 = value2, ...)
```

Lets look at the function `mean`

```{r eval = FALSE}
help(mean)
```


```{r echo = FALSE}
library(printr)
help(mean)
detach('package:printr', unload = TRUE)
```

In the documentation we see that there are arguments like:

- x
- trim: Take note that the arguement is set to 0 by default
- na.rm: Take note that the arguement is set to FALSE by default

So when we use this function we need to specify some values for at least some of these arguments, e.g.:

```{r, eval = FALSE}
mean(x = v_lengths)           # explicitly type the argument name (here x)
mean(v_lengths)               # do not type the arguement name, just use the argument order
mean(v_weights, na.rm = TRUE) # overwrite the default value set for the arguement na.rm
mean(v_weights, 0.4, TRUE)
```

When running the last command the value 0.4 is assigned to the arguement trim. If were to do this in the following order we get an error:

```{r, eval = FALSE}
mean(v_weights, TRUE, 0.4)
```

because the second arguement (trim) has to be numeric not a boolean and vica versa for the third arguement (na.rm). This would though not give an error because we explicitly name the argument:

```{r eval = FALSE}
mean(v_weights, na.rm = TRUE, trim = 0.4)
```


## On base R vs tidyverse

So far we have been dealing with data-frames (e.g. the minke data):

```{r}
library(tidyverse)
w <- read_csv("ftp://ftp.hafro.is/pub/data/csv/minke.csv")
```

We can check the class of the object w via:

```{r}
class(w)    # key thing for now is that we see this is a "data.frame"
```

We access the values of each of the variables by using the '$'-sign:

```{r}
w$length
w$weight
```

We can even access individual or sets of values using the '[ ]'

```{r}
w$length[1]              # length value of the first observations
w$weight[2]              # weight value of the second observation
w$maturity[1:10]         # maturity stage of the first 10 observations
```

In the [Transformation-tutorial](transformation1.qmd) we calculated new variables within the data-frame, e.g. when calculating derived weight from length:

```{r, eval = FALSE}
w |> 
  mutate(computed_weight = 0.00001 * length^3)
```

We could have achieved the same thing by doing:

```{r, eval = FALSE}
w$computed_weight <- 0.00001 * w$length^3
```

We could even have "extracted" the lengths in the data-frame into a separate object (a numerical vector) and then done this:

```{r}
v_lengths <- w$length
class(v_lengths)
v_weights <- w$weight
v_weights_computed <- 0.00001 * v_lengths^3
```

What we have now though is a separate object for the derived weights and the only linkage between length and weights is the order within each vector, e.g. the fifth observations for length and then the derived weight can be obtained by:

```{r eval = FALSE}
v_lengths[5]
v_weights[5]
```

We can easily apply summary functions on these vectors, e.g.:

```{r, eval = FALSE}
mean(v_lengths)
sd(v_lengths)
mean(v_weights, na.rm = TRUE)   # overwrite the default argument (see below)
sd(v_weight, na.rm = TRUE)      # overwrite the default argument (see below)
```

The above is an example of operation within the base-R environment

**Why are you telling me this?**:

- As you progress in R and start to look at other peoples code you are bound to stumble on base-R code like this.
- Although you can do a lot within the tidyverse-framework you will at some time need to know and use base-R.
- Think of base-R as your friend, not a foe.

